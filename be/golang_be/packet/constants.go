package main

/**********************************************************
 *        Used to define type of incomming packet
 *********************************************************/
const DATA_PACKET = (0)           // Server -> Device
const CMD_PACKET = (1)            // Server -> Device
const INTERNAL_ACK_PACKET = (2)   // Internal
const DEVICE_ACK_PACKET = (3)     // Device -> Server
const SERVER_ACK_PACKET = (4)     // Server -> Device
const LOGIN_PACKET = (5)          // Device -> Server
const HELLO_WORLD_PACKET = (6)    // Device -> Server
const CMD_RESPONSE_PACKET = (7)   // Device -> Server
const UNSOLICATED_PACKET = (8)    // Device -> Server
const ECHO_PACKET = (9)           // Device <-> Server
const NOT_USED = (10)             // server -> device
const FOTA_PACKET = (11)          // Server -> Device
const FOTA_ACK_PACKET = (12)      // Device -> Server
const VOID_PACKET = (13)          // Device -> Server
const GOODBYE_WORLD_PACKET = (14) // Packet->Server (generated internally)

const TYPE_SIZE = (1)
const TRANSACTION_ID_SIZE = (2)
const SMALL_PAYLOAD_SIZE = (16)
const MEDIUM_PAYLOAD_SIZE = (256)
const LARGE_PAYLOAD_SIZE = (512)
const REASON_SIZE = (1)
const HOST_ACK_REQ_SIZE = (1)
const CRC_SIZE = (2)

const PACKETS_REMAINING_SIZE = (1)
const CMD_STATUS_SIZE = (1)

const PACKET_TYPE_OFFSET = (0)
const PACKET_TRANSACTION_ID_OFFSET = (1)
const PACKET_HOST_ACK_REQ_OFFSET = (3)
const PACKET_CRC_OFFSET = (4)
const PAYLOAD_OFFSET = (6)

// Payload element offsets
const PAYLOAD_OFFSET_ACK_NAK_REASON = (0)
const PAYLOAD_OFFSET_DEVICE_ID = (0)

const DATA_PACKET_SIZE = (TYPE_SIZE + TRANSACTION_ID_SIZE + HOST_ACK_REQ_SIZE + CRC_SIZE + LARGE_PAYLOAD_SIZE)
const CMD_PACKET_SIZE = (TYPE_SIZE + TRANSACTION_ID_SIZE + HOST_ACK_REQ_SIZE + CRC_SIZE + MEDIUM_PAYLOAD_SIZE)
const ACK_PACKET_SIZE = (TYPE_SIZE + TRANSACTION_ID_SIZE + HOST_ACK_REQ_SIZE + CRC_SIZE + SMALL_PAYLOAD_SIZE)
const LOGIN_PACKET_SIZE = (TYPE_SIZE + TRANSACTION_ID_SIZE + HOST_ACK_REQ_SIZE + CRC_SIZE + MEDIUM_PAYLOAD_SIZE)
const HELLO_PACKET_SIZE = (TYPE_SIZE + TRANSACTION_ID_SIZE + HOST_ACK_REQ_SIZE + CRC_SIZE + MEDIUM_PAYLOAD_SIZE)
const CMD_RESPONSE_PACKET_SIZE = (TYPE_SIZE + TRANSACTION_ID_SIZE + HOST_ACK_REQ_SIZE + CRC_SIZE + MEDIUM_PAYLOAD_SIZE)
const ECHO_PACKET_SIZE = (TYPE_SIZE + TRANSACTION_ID_SIZE + HOST_ACK_REQ_SIZE + CRC_SIZE + MEDIUM_PAYLOAD_SIZE)
const SYNC_PACKET_SIZE = (TYPE_SIZE + TRANSACTION_ID_SIZE + HOST_ACK_REQ_SIZE + CRC_SIZE + LARGE_PAYLOAD_SIZE)
const FOTA_PACKET_SIZE = (TYPE_SIZE + TRANSACTION_ID_SIZE + HOST_ACK_REQ_SIZE + CRC_SIZE + MEDIUM_PAYLOAD_SIZE)
const FOTA_ACK_PACKET_SIZE = (TYPE_SIZE + TRANSACTION_ID_SIZE + HOST_ACK_REQ_SIZE + CRC_SIZE + MEDIUM_PAYLOAD_SIZE)
const VOID_PACKET_SIZE = (TYPE_SIZE + TRANSACTION_ID_SIZE + HOST_ACK_REQ_SIZE + CRC_SIZE + MEDIUM_PAYLOAD_SIZE)
const GOODBYE_PACKET_SIZE = (TYPE_SIZE + TRANSACTION_ID_SIZE + HOST_ACK_REQ_SIZE + CRC_SIZE + SMALL_PAYLOAD_SIZE)

const PACKET_LEN_MAX = DATA_PACKET_SIZE

const MAX_OUTSTANDING_TCP_CORE_SEND = (16)

const QUEUE_LEN_ONE = (1)
const QUEUE_MIN_SIZE = (4) //sizeof int32
const DONT_WAIT_QUEUE = (0)

/**********************************************************
 *                    ACK/NAK REASONS
 *********************************************************/
const ACK_GOOD = (0)
const NAK_TCP_DOWN = (1)

// These are generated by the server
const TOO_MANY_OUTSTANDING_COMMANDS = (100)
const SENT_TO_INACTIVE_CLIENT = (101)

/**********************************************************
 *                    CMDs
 *********************************************************/
const ADD_USER_CMD = (0)
const DELETE_ALL_USERS_CMD = (1)
const GET_ALL_USERS_CMD = (2)
const DELETE_SPECIFIC_USER_CMD = (3)
const DISCONNECT_CMD = (4)
const UPDATE_USER_CMD = (5)
const PUSH_USER_CMD = (6)
const GENERATE_REPORT = (7)
const GET_ALL_DEVICES = (8)
const GET_ALL_USERS_PER_DEVICE = (9)
const FORCE_SYNC = (10)
const GET_ALL_USERS_PER_DEVICE_FINAL = (11)
const GENERATE_DEVICE_ID = (12)
const HARD_RESET = (13)
const DISPLAY_MSG_LCD = (14)

/* The following two packets will ALWAYS be sent after each other
   The first gets the user list on a device, the next trims it based on
	    actual db on server */
const GET_ALL_USERS_PRE_SYNC = (8)
const SYNC_CMD = (9)

// Test only
const ECHO_CMD = (100)
const TIME_OUT_NEXT_PACKET = (101)
const VOID_CMD = (102)
const SEND_MULTI_PART_RSP = (103)
const SEND_MULTI_PART_RSP_FAIL = (104)
const ADD_USER_CMD_TO_FLASH = (105)
const DELETE_USER_FROM_FLASH_TEST = (106)
const SEND_TEST_LOGIN_PACKET = (107)
const SET_DEVICE_ID_TEST = (108)
const GET_DEVICE_ID_TEST = (109)
const ACK_STRESS_TEST = (110)

//Responses
const CMD_STATUS_GOOD = (0)
const CMD_STATUS_FAILED = (1)
const CMD_ACK_TIMED_OUT = (2)
const CMD_TIMED_OUT_INTERNAL = (3)
const CMD_STATUS_USER_EXISTS = (7) //must be kept in sync with fw (this is from parallax thumb print)
const CMD_STATUS_FAILED_CRC = (10)

//from file-core
const CMD_STATUS_FAILED_MEM_FULL = (11)
const CMD_STATUS_FAILED_USER_NOT_EXIST = (12)
const CMD_STATUS_FAILED_USER_EXISTS = (13)
const CMD_STATUS_FAILED_MEM_EMTPY = (14)

//uid related
const CMD_STATUS_UID_EXISTS = (20)

const DONT_REPLACE_IF_PRINT_EXISTS = (false)
const FORCE_REPLACE_IF_PRINT_EXISTS = (true)

// internal
const CMD_TIME_OUT = (50) // Internal

/**********************************************************
 *               CONSUMER ACK REQUIREMENTS
 *********************************************************/
const CONSUMER_ACK_NOT_NEEDED = (0)
const CONSUMER_ACK_REQUIRED = (1)

const INTERNALLY_ACKED = (1)
const PENDING_ACK = (0)

/**********************************************************
 *                  COMMAND PACKET PAYLOAD
 *********************************************************/
const PAYLOAD_OFFSET_CMD_COMMAND = (0) //offset within the payload of a cmd packet that the command is defined

type Cmd_add_user struct {
	Cmd_type uint8
	Name     []byte
}

/**********************************************************
 *               GENERAL STRUCTS
 *********************************************************/
type Packet struct {
	Packet_type      uint8
	Transaction_id   uint16
	Consumer_ack_req uint8
	Crc              uint16
	Data             []byte
}

/**********************************************************
 *               GENERAL TEST CONSTANTS
 *********************************************************/
const MULTI_PART_TEST_PACKETS_COUNT_BYTE_OFFSET = (1)
const MULTI_PART_TEST_DEVICE_PACKET_COUNTER = (0) // Which packet the device thinks it just sent

// All structs are guranteed to have the
// following members
type Packet_general struct {
	Packet_type      uint8
	Transaction_id   uint16
	Consumer_ack_req uint8
	Crc              uint16
}

//Payload of a command packet looks as such
type Cmd_payload struct {
	Cmd_type    uint8
	Cmd_payload []byte
}

// this must be kept in line with QCORE
const CMD_RESPONSE_PAYLOAD_LEN = 250

// response command payload looks like this
type Cmd_resp_payload struct {
	Cmd_status              uint8
	Transaction_id          uint16 // CMD being acked
	Total_packets           uint8
	Packets_sequence_number uint8
	Payload_len             uint8
	Resp_payload            []byte
}

//need to unpack, otherwise Resp_payload will throw an error
type Cmd_resp_payload_general struct {
	Cmd_status              uint8
	Transaction_id          uint16 // CMD being acked
	Total_packets           uint8
	Packets_sequence_number uint8
	Payload_len             uint8
}

//name_response
type Cmd_name_response struct {
	Internal_id uint16 /*which file slot is used by the device */
	Uid         uint32 /*actuall UID in the sql database */
	Name        []byte
}

type Login_payload struct {
	temperature     uint16
	signInOrSignOut uint8
	uid             uint32
	user_name       string // CMD being acked
}

type db_q_fill struct {
	Temperature uint16
	User_name   string
	Time        string
}

type login_subscription struct {
	Type        uint8
	Temperature uint16
	UserName    string
}

type Fota_packet struct {
	magic_marker uint32
	Type         uint8
	FW_version   uint16
	FW_CRC32     uint32
	FW_CRC16     uint16
	FW_segment   uint16
	FW_blocks    uint16 /* (total segments/8) */
}

type Fota_ack_packet struct {
	Type   uint8
	status uint8
}

type hello_packet struct {
	DeviceId    uint64
	fw_version  uint16
	bricked     uint8
	device_name string
}
